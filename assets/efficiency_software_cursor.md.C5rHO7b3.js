import{_ as r,E as o,c as t,o as s,j as a,I as i,am as c,a as n}from"./chunks/framework.pKienSF_.js";const q=JSON.parse(`{"title":"Cursor 相关","description":"","frontmatter":{"head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"3LNfUkScYzEz6k4D\\",\\"ck\\":\\"3LNfUkScYzEz6k4D\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"efficiency/software/cursor.md","filePath":"efficiency/software/cursor.md","lastUpdated":1753175954000}`),l={name:"efficiency/software/cursor.md"},d=a("h1",{id:"cursor-相关",tabindex:"-1"},[n("Cursor 相关 "),a("a",{class:"header-anchor",href:"#cursor-相关","aria-label":'Permalink to "Cursor 相关"'},"​")],-1),h=c('<h2 id="基础使用" tabindex="-1">基础使用 <a class="header-anchor" href="#基础使用" aria-label="Permalink to &quot;基础使用&quot;">​</a></h2><h3 id="几个快捷键" tabindex="-1">几个快捷键 <a class="header-anchor" href="#几个快捷键" aria-label="Permalink to &quot;几个快捷键&quot;">​</a></h3><p><strong>ctrl + K</strong></p><h3 id="关闭" tabindex="-1">关闭 <a class="header-anchor" href="#关闭" aria-label="Permalink to &quot;关闭&quot;">​</a></h3><p>tab 会出现一种情况，就是当你文思泉涌，在积极 coding 时，tab 的建议项有可能会干扰你的思路。这个时候我们可以关闭 tab 功能。将鼠标悬浮到 Cursor 右下角的 Cursor Tab 上，然后勾选弹窗中的 Disable globally。</p><h3 id="docs" tabindex="-1">Docs <a class="header-anchor" href="#docs" aria-label="Permalink to &quot;Docs&quot;">​</a></h3><h2 id="cursor-设置" tabindex="-1">Cursor 设置 <a class="header-anchor" href="#cursor-设置" aria-label="Permalink to &quot;Cursor 设置&quot;">​</a></h2><h2 id="上下文引用" tabindex="-1">上下文引用 <a class="header-anchor" href="#上下文引用" aria-label="Permalink to &quot;上下文引用&quot;">​</a></h2><p>Cursor 最新版本（截至 2025 年 3 月）在上下文引用功能上进行了多项优化和扩展，主要通过**@注记（Annotations）和集成工具**实现多维度代码上下文的智能调用。以下是具体功能的分类介绍：</p><p>@Files 引用整个文件作为上下文。支持文件路径预览和分块处理。 需要引用特定文件内容时，如代码文件、文档等。 @Folders 引用整个文件夹作为上下文。 需要提供大量文件作为上下文，例如项目目录。 @Code 引用特定代码片段作为上下文。 需要针对特定代码片段进行查询或操作。 @Codebase 从代码库中搜索重要文件或代码块，并根据相关性重新排序。 需要在整个代码库中查找相关代码或文件。 @Git 扫描 Git 提交、差异或拉取请求，帮助查找问题。 需要分析 Git 相关信息，如提交记录、代码差异等。 @Web 搜索网络信息作为附加上下文。 需要获取最新网络信息或外部资源。 @Docs 引用预设的第三方文档或自定义文档。支持添加自定义文档。 需要引用外部文档或自定义知识库。 @Definitions 引用附近的所有定义作为上下文。 需要引用当前代码中的变量、函数等定义。 @Chat 将当前聊天消息添加为上下文。 在聊天中需要引用之前的对话内容。</p><p>使用技巧： 可以组合使用多个@命令 在输入@后会有自动补全提示 Agent 模式下，AI 可以自动选择合适的@命令 使用@Recommended 让 AI 自动选择需要的上下文</p><p>实际应用示例： 比如当你想优化登录功能的性能时，你可以如下组合使用@ @Code login // 查看登录相关代码 @Lint errors // 检查代码质量问题 @Web &quot;login performance optimization&quot; // 搜索优化建议</p><h2 id="三种模式" tabindex="-1">三种模式 <a class="header-anchor" href="#三种模式" aria-label="Permalink to &quot;三种模式&quot;">​</a></h2><p>在 Cursor 中，Agent、Chat 和 Edit 三种模式分别针对不同的编程需求和使用场景，它们的主要区别如下：</p><p>Agent 模式 功能描述：这是 Cursor 的一个完全自主模式，适用于整个项目。它可以在多个文件中生成代码，运行 shell 命令，并能自行查找上下文。 适用场景：适合通过一句话创建完整项目，处理复杂的开发任务，如重构模块、修复代码错误、自动化执行任务等。 特点：具有高度的自主性，能够理解项目结构和依赖关系，主动解决问题，支持多任务协同工作。 Chat 模式（原来的 Ask 模式） 功能描述：这是一个对话式的编码助手，适合用于了解整个代码库的功能，进行代码局部功能的修改与调试，快速问答，调试代码以及了解更多关于代码库的信息。 适用场景：当你需要探索代码库、提出问题并获得解释或建议时非常有用。它也适合于单文件的理解、片段代码问题的解释等场景。 特点：交互性强，提供即时反馈，便于开发者与代码互动，获取解释和建议。 Edit 模式（原来的 Composer Normal 模式） 功能描述：这个模式适合用来添加新功能，适用于大型任务的代码生成。相比 Chat 模式，它更加自主，可以跨多个文件自动执行样板或重复代码任务。 适用场景：当你需要编写新功能或者对现有代码进行较大规模的修改时使用。它适合于编写新功能、修改现有代码等场景。 特点：能够处理相对复</p><h2 id="rules-设置" tabindex="-1">Rules 设置 <a class="header-anchor" href="#rules-设置" aria-label="Permalink to &quot;Rules 设置&quot;">​</a></h2><p>cursor 更新的很快，Cursor Rules 更新的很快</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://github.com/PatrickJS/awesome-cursorrules?tab=readme-ov-file" target="_blank" rel="noreferrer">awesome-cursorrules</a><br></p>',19);function u(p,f,b,m,_,C){const e=o("ArticleMetadata");return s(),t("div",null,[d,i(e),h])}const A=r(l,[["render",u]]);export{q as __pageData,A as default};
