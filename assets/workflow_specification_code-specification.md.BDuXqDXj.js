import{_ as a,E as n,c as e,o as t,j as s,I as l,am as p,a as h}from"./chunks/framework.pKienSF_.js";const r="/assets/git-flow.BtytQIGN.png",k="/assets/git-workflow-poster.CTPS79zz.svg",f=JSON.parse(`{"title":"编码规范相关","description":"","frontmatter":{"head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"3LNfUkScYzEz6k4D\\",\\"ck\\":\\"3LNfUkScYzEz6k4D\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"workflow/specification/code-specification.md","filePath":"workflow/specification/code-specification.md","lastUpdated":1758097621000}`),d={name:"workflow/specification/code-specification.md"},c=s("h1",{id:"编码规范相关",tabindex:"-1"},[h("编码规范相关 "),s("a",{class:"header-anchor",href:"#编码规范相关","aria-label":'Permalink to "编码规范相关"'},"​")],-1),o=p(`<h2 id="序言" tabindex="-1">序言 <a class="header-anchor" href="#序言" aria-label="Permalink to &quot;序言&quot;">​</a></h2><p>最近整理了一下自己在团队中实践并落地的编码规范相关内容，主要包含以下几类：</p><ul><li><strong>命名规范与项目结构规范</strong>：如何为变量、函数、文件、目录制定清晰的命名规则</li><li><strong>Git 提交规范</strong>：如何通过规范的提交信息提高项目可追溯性</li><li><strong>代码格式化工具</strong>：如何利用 Prettier 等工具自动化统一代码风格</li><li><strong>工作流相关</strong>：如何保证规范能够被正确、稳定且便捷地使用</li></ul><h2 id="命名规范与项目结构规范" tabindex="-1">命名规范与项目结构规范 <a class="header-anchor" href="#命名规范与项目结构规范" aria-label="Permalink to &quot;命名规范与项目结构规范&quot;">​</a></h2><p>命名规范是编程规范中最重要的一部分，它直接影响到代码的可读性和可维护性</p><p>我们常见的命名形式有：</p><table tabindex="0"><thead><tr><th>命名形式</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>camelCase</code></td><td><code>userName</code></td><td>小驼峰式命名法（首字母小写）</td></tr><tr><td><code>PascalCase</code></td><td><code>UserName</code></td><td>大驼峰式命名法（首字母大写）</td></tr><tr><td><code>snake_case</code></td><td><code>user_name</code></td><td>下划线命名法</td></tr><tr><td><code>kebab-case</code></td><td><code>user-name</code></td><td>短横线命名法</td></tr><tr><td><code>UPPER_CASE</code></td><td><code>USER_NAME</code></td><td>大写命名法</td></tr></tbody></table><h3 id="文件命名规范" tabindex="-1">文件命名规范 <a class="header-anchor" href="#文件命名规范" aria-label="Permalink to &quot;文件命名规范&quot;">​</a></h3><ul><li>项目名称使用短横线命名法。🌰 <code>qianxun-notes</code></li><li><code>html / css / md / js / ts / jsx / tsx</code> 文件使用短横线命名法</li><li><code>React / Vue</code> 组件文件使用大写驼峰式命名法。🌰 <code>Dialog.vue</code> / <code>Dialog.tsx</code></li><li>静态资源文件使用短横线命名法。🌰 <code>logo-white.png</code></li></ul><h3 id="javascript-命名规范" tabindex="-1"><code>JavaScript</code> 命名规范 <a class="header-anchor" href="#javascript-命名规范" aria-label="Permalink to &quot;\`JavaScript\` 命名规范&quot;">​</a></h3><ul><li>常量使用大写命名法。🌰 <code>const MAX_COUNT = 1996</code></li><li>正则常量命名使用后缀 <code>_RE</code>。🌰 <code>const PHONE_RE = /^1[3-9]\\d{9}$/</code></li><li>变量使用小驼峰式命名法。🌰 <code>const maxCount = 1996</code></li><li><code>class</code> 类名使用大驼峰式命名法。🌰 <code>class User {}</code></li><li>构造函数使用大驼峰式命名法。🌰 <code>function User() {}</code></li><li>函数使用小驼峰式命名法。🌰 <code>function getUserInfo() {}</code></li><li>对象 <code>key</code> 使用小驼峰式命名法。🌰 <code>const user = { userName: &#39;qianxun&#39; }</code></li><li>路由 <code>path</code> 使用短横线命名法。🌰 <code>path: &#39;/user-info&#39;</code></li></ul><h3 id="css-命名规范" tabindex="-1"><code>CSS</code> 命名规范 <a class="header-anchor" href="#css-命名规范" aria-label="Permalink to &quot;\`CSS\` 命名规范&quot;">​</a></h3><ul><li>类名使用短横线命名法。🌰 <code>.user-info</code></li><li><code>ID</code> 使用小驼峰式命名法。🌰 <code>#userInfo</code></li><li>自定义变量使用短横线命名法。🌰 <code>--main-color: #fff</code></li></ul><p>值得<strong>注意</strong>的是，命名规范也只是规范，也并不是说必须得强制执行，<strong>有时也得灵活变动下</strong>。比如说大家一般都很鄙视使用<strong>拼音命名</strong>，认为这种方式很<code>low</code>，但在某些情景下，由其是定义一些专业术语变量，我认为用汉语拼音反而比强行翻译成英文要好。</p><p>比如我们在写一个基建类项目，需要定义一个<code>路面机构层厚度</code>相关的变量，翻译成英文叫<code>Pavement structure layer thickness</code>，使用小驼峰命名法<code>pavementStructureLayerThickness</code>，嗯。。。属实有点反人类，写成缩写<code>PSLT</code>也有点抽象，定义成拼音<code>luMianJieGouCengHouDu</code>虽然不好看，但是矮子里面挑将军，对于熟悉项目的人来说，这种命名方式反而更能接受些。</p><h3 id="项目结构规范" tabindex="-1">项目结构规范 <a class="header-anchor" href="#项目结构规范" aria-label="Permalink to &quot;项目结构规范&quot;">​</a></h3><p>以下以一个通用的前端项目为例（目录结构可按技术栈微调）：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .vscode</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           # VSCode 配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> public</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            # 网站资源文件（favicon.ico index.html 等）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           # 脚本相关</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apis</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          # api 接口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assets</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # 静态资源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # 全局组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # 项目配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> constants</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # 常量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hooks</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # 通用 hooks</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> layout</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # 页面整体布局</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           # 第三方或无业务依赖代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> locales</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                       # i18n</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pages</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # 页面相关文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # 大驼峰规范 =&gt; 组件即是一个构造函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 页面相关的子组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.module.scss</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 根据应用的 CSS Scope 方案命名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.tsx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # index 作为默认路径，视为根节点</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> App.tsx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # 页面入口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> router</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # 页面路由</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # 状态管理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> styles</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # 全局/基础样式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> types</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # TypeScript 类型声明</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utils</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # 工具函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.tsx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # 应用启动入口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         # 当前项目的文档</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # 项目信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsconfig.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # TypeScript 配置文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>有两点需<strong>要注意</strong>：</p><ol><li>上面规范也只是参考，<strong>不同语言的项目结构规范不一样</strong>，甚至<code>vue2</code>与<code>vue3</code>都不太一样，但是核心思想都大差不差</li><li>项目结构规范由其适用于<strong>约定大于规范</strong>这句话，如果是维护的老项目，尽量不要随着自己心意更改整个项目结构，不要随便增加或者更改结构文件夹，<s>否则可能会迎来队友的痛击</s></li></ol><h2 id="git-相关规范" tabindex="-1">Git 相关规范 <a class="header-anchor" href="#git-相关规范" aria-label="Permalink to &quot;Git 相关规范&quot;">​</a></h2><h3 id="分支管理规范" tabindex="-1">分支管理规范 <a class="header-anchor" href="#分支管理规范" aria-label="Permalink to &quot;分支管理规范&quot;">​</a></h3><p>主要是对分支的命名与管理做约定。</p><p><strong>命名</strong></p><p>分支命名建议使用 <code>feature/xxx-xxx</code> 或 <code>fix/xxx-xxx</code> 的格式，单词之间用短横线 <code>-</code> 连接。</p><p><strong>分支管理</strong></p><p>项目需要根据环境的不同创建对应的分支，通常有下面五种分支：</p><ul><li><code>master</code> - 生产环境分支，只接受来自 <code>develop</code> 的合并</li><li><code>develop</code> - 开发环境分支，所有功能开发的基础分支</li><li><code>test</code> - 测试环境分支，用于部署测试版本</li><li><code>feature/xxx</code> - 功能分支，用于开发新功能</li><li><code>fix/xxx</code> - 修复分支，用于修复 <code>bug</code></li></ul><p><strong>Git 相关工作流规范</strong></p><p><code>Git</code>相关工作流规范，网上的版本其实非常多，贴一个我比较常用的 <code>Git Flow</code> 流程图，和主流常用的大同小异：</p><p><img src="`+r+`" alt="" loading="lazy"></p><p><strong>开发新功能时</strong>：当团队成员开发新功能时，需要从 <code>develop</code> 分支上拉一个 <code>feature/功能名称</code> 分支进行开发，例如：<code>feature/login</code>。开发完成后需要合并到 <code>test</code> 分支进行部署测试，如果测试未通过，继续在<code>feature/功能名称</code>上开发，如果测试通过，合并到<code>develop</code>，<code>develop</code>再合并到<code>master</code></p><p><strong>修复 Bug 时</strong>：当线上出现<code>bug</code>时，从<code>master</code>分支上拉一个<code>fix/修复功能名称</code>分支进行开发，例如<code>fix/upload</code>。开发完成后也需要合并到 <code>test</code> 分支进行部署测试，测试通过，合并到<code>develop</code>和<code>master</code></p><p>值得一提的是，我这个是简化过后的，适用于我们自己项目的<code>Git Flow</code>。当前各个公司流行的<code>Git Flow</code>很多都是延伸自<code>Vincent Driessen</code>在<code>2010</code>年写的一篇文章<a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer">A successful Git branching model</a>，网上也有很多文章对此进行了详细的解读，有兴趣的也可以搜索看下。</p><h3 id="git-提交规范" tabindex="-1">Git 提交规范 <a class="header-anchor" href="#git-提交规范" aria-label="Permalink to &quot;Git 提交规范&quot;">​</a></h3><p>深究的话，提交规范的要求还挺高的，它的大致结构为<code>git commit message</code>要求填写五项内容：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(&lt;scope&gt;): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>type</code>（必填）：<code>commit</code> 的类型</li><li><code>scope</code>（选填）：<code>commit</code> 的影响范围</li><li><code>subject</code>（必填）：<code>commit</code> 信息的简短描述（50 字以内）</li><li><code>body</code>（选填）：<code>commit</code> 信息的具体描述</li><li><code>footer</code>（选填）：重大变化（<code>Breaking Change</code>）和需要关闭的<code>Issue</code></li></ul><p>但是就我自己实践并结合我在团队中推行规范的情况来看，大部分人<s>包括我自己</s>其实能写清楚<code>type</code>就不错了。通常我们的项目开发周期非常快，<code>git</code>提交的频率很高，提交一个<code>commit</code>就得写真么多东西在快节奏开发中属实有点不太现实。但是规范下提交的<code>type</code>还是很有必要的，一个合理的<code>type</code>能够帮助我们大致识别出来这个提交是干嘛的。</p><p><strong>commit 常用 type：</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">type</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><em>feat</em></td><td style="text-align:left;">新功能</td></tr><tr><td style="text-align:center;"><em>fix</em></td><td style="text-align:left;">修复 bug</td></tr><tr><td style="text-align:center;"><em>docs</em></td><td style="text-align:left;">文档类改动</td></tr><tr><td style="text-align:center;"><em>style</em></td><td style="text-align:left;">代码格式改动，同理适用于业务样式调整</td></tr><tr><td style="text-align:center;"><em>refactor</em></td><td style="text-align:left;">重构（即不是新增功能，也不是修复 bug）</td></tr><tr><td style="text-align:center;"><em>perf</em></td><td style="text-align:left;">性能优化相关</td></tr><tr><td style="text-align:center;"><em>types</em></td><td style="text-align:left;"><code>TypeScript</code> 类型相关的改动</td></tr><tr><td style="text-align:center;"><em>test</em></td><td style="text-align:left;">单元测试、e2e 测试</td></tr><tr><td style="text-align:center;"><em>build</em></td><td style="text-align:left;">构建工具或者依赖项的改动</td></tr><tr><td style="text-align:center;"><em>ci</em></td><td style="text-align:left;">修改项目持续集成流程</td></tr><tr><td style="text-align:center;"><em>chore</em></td><td style="text-align:left;">其他类型的提交</td></tr><tr><td style="text-align:center;"><em>revert</em></td><td style="text-align:left;">恢复或还原相关提交</td></tr><tr><td style="text-align:center;"><em>wip</em> | <em>draft</em></td><td style="text-align:left;">托管平台对应的草稿标识</td></tr></tbody></table><h2 id="代码格式化" tabindex="-1">代码格式化 <a class="header-anchor" href="#代码格式化" aria-label="Permalink to &quot;代码格式化&quot;">​</a></h2><p>代码格式化可以保证团队成员有一致的编码风格，最常用的格式化工具应该就属<code>prettier</code>了</p><p>下面是一些我自己的<code>prettier</code>规范</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prettier 配置项</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * https://prettier.io/docs/en/options.html</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 一行最多 100 字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  printWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用 2 个空格缩进</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tabWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 不使用缩进符，而使用空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useTabs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 行尾需要有分号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  semi: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用双引号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  singleQuote: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 对象的 key 仅在必要时用引号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  quoteProps: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;as-needed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // jsx 不使用单引号，而使用双引号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  jsxSingleQuote: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // es5有效的地方保留逗号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  trailingComma: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 大括号内的首尾需要空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bracketSpacing: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // jsx 标签的反尖括号需要换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  jsxBracketSameLine: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 箭头函数，只有一个参数的时候，也需要括号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  arrowParens: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;always&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 每个文件格式化的范围是文件的全部内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rangeStart: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rangeEnd: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 不需要写文件开头的 @prettier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  requirePragma: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 不需要自动在文件开头插入 @prettier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  insertPragma: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用默认的折行标准</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  proseWrap: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preserve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 根据显示样式决定 html 要不要折行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  htmlWhitespaceSensitivity: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 换行符使用 lf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  endOfLine: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>需要提醒的是，对老项目，千万不要手贱对所有文件都格式化了，要不然就会出现所有文件的最新更改记录都是自己这种尴尬情况，~<s>反正我没干过</s>~</p><p>代码格式化相关的还有<code>eslint</code>这种静态检查工具，不过我不太喜欢，这里就不展开说了。需要注意的是，如果使用了<code>eslint</code>，需要处理好它与<code>prettier</code>的检测冲突问题，网上这种文章很多，有兴趣可以搜索看下。</p><h2 id="工作流相关" tabindex="-1">工作流相关 <a class="header-anchor" href="#工作流相关" aria-label="Permalink to &quot;工作流相关&quot;">​</a></h2><p>规范制定好了，还需要确保“被正确执行”。现实中常见的问题包括：</p><p>对于老项目，还需要做其他东西</p><p>代码格式化</p><ul><li>某些人提交<code>Git</code>的时候就是不按照定义的规范来，比如随意写个<code>commit</code>就提交上去了</li><li>团队中有人已经设置过了自己的<code>prettier</code>规范，或者某些人的<code>保存并开启格式化</code>功能并没有开启，设置了<code>prettier</code>可能也不起作用</li></ul><p>这时候我们期望有一系列的工具，可以帮助我们解决以下问题：</p><ol><li>提交<code>Git</code>的时候检查<code>commit</code>格式，不符合格式的不允许提交</li><li>提交时对提交文件自动进行<code>prettier</code>格式化，这样做可以只对提交文件进行格式化</li></ol><p>我们可以用以下工具实现我们想要的效果：</p><ol><li><a href="https://github.com/typicode/husky" target="_blank" rel="noreferrer">husky</a>：<code>Git Hooks</code> 工具，在提交、推送等时机执行脚本</li><li><a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a>：校验 <code>commit message</code>是否符合规范</li><li><a href="https://github.com/lint-staged/lint-staged" target="_blank" rel="noreferrer">lint-staged</a>：仅对暂存文件运行 <code>ESLint/Prettier</code></li></ol><p>它们的协作流程如下图：</p><p><img src="`+k+'" alt="git-workflow-poster" loading="lazy"></p><p>在执行 <code>git commit</code> 时，<code>husky</code> 会触发相应的钩子，进而：</p><ul><li>调用 <code>commitlint</code> 校验提交信息格式</li><li>调用 <code>lint-staged</code> 对暂存文件运行 <code>ESLint/Prettier</code></li></ul><p>当两者都通过后，提交才会被允许进入仓库。</p><p>以上工具相关的配置可以去网上搜索下，然后根据自己的项目所需进行配置，想懒省事也可以看下我开发的两个小工具： <a href="https://www.npmjs.com/package/@fe-qianxun/verify-commit" target="_blank" rel="noreferrer">@fe-qianxun/verify-commit</a> 和 <a href="https://www.npmjs.com/package/@fe-qianxun/prettier" target="_blank" rel="noreferrer">@fe-qianxun/prettier</a></p><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><ul><li><a href="https://docs.fe-qianxun.com/" target="_blank" rel="noreferrer">我的博客</a></li><li><a href="https://github.com/conventional-commits/conventionalcommits.org" target="_blank" rel="noreferrer">Conventional Commits | GitHub</a></li><li><a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines" target="_blank" rel="noreferrer">Angular convention | Github</a></li><li><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer">A successful Git branching model</a></li></ul><blockquote><p>💡 <strong>提示</strong>：编程规范不是限制创造力的枷锁，而是提升代码质量的工具。好的规范应该让开发者专注于业务逻辑的实现，而不是纠结于代码格式的细节。</p></blockquote>',65);function g(F,y,E,b,u,m){const i=n("ArticleMetadata");return t(),e("div",null,[c,l(i),o])}const A=a(d,[["render",g]]);export{f as __pageData,A as default};
