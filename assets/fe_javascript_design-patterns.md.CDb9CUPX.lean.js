import{_ as s,E as r,c as n,o as i,j as e,I as c,a}from"./chunks/framework.pKienSF_.js";const P=JSON.parse(`{"title":"Javascript 设计模式与开发实践","description":"","frontmatter":{"head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"3LNfUkScYzEz6k4D\\",\\"ck\\":\\"3LNfUkScYzEz6k4D\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"fe/javascript/design-patterns.md","filePath":"fe/javascript/design-patterns.md","lastUpdated":1758097621000}`),o={name:"fe/javascript/design-patterns.md"},d=e("h1",{id:"javascript-设计模式与开发实践",tabindex:"-1"},[a("Javascript 设计模式与开发实践 "),e("a",{class:"header-anchor",href:"#javascript-设计模式与开发实践","aria-label":'Permalink to "Javascript 设计模式与开发实践"'},"​")],-1),l=e("h2",{id:"前言",tabindex:"-1"},[a("前言 "),e("a",{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},"​")],-1),p=e("p",null,"设计模式并非是软件开发的专业属于，",-1),h=e("h2",{id:"第一章",tabindex:"-1"},[a("第一章 "),e("a",{class:"header-anchor",href:"#第一章","aria-label":'Permalink to "第一章"'},"​")],-1),_=e("p",null,"JavaScript 没有提供传统面向对象语言中的类式继承，而是通过原型委托的方式来实现对象与对象之间的继承。",-1),f=e("p",null,"动态类型语言对变量类型的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测， 我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。",-1),m=e("p",null,"在动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们 不必借助超类型的帮助，就能轻松地在动态类型语言中实现一个原则：“面向接口编程，而不是 面向实现编程”。例如，一个对象若有 push 和 pop 方法，并且这些方法提供了正确的实现，它就 可以被当作栈来使用。一个对象如果有 length 属性，也可以依照下标来存取属性（最好还要拥 有 slice 和 splice 等方法），这个对象就可以被当作数组来使用",-1),u=e("p",null,"多态背后的思想是将“做什么”和“谁去做以及怎样去做”分离开来，也就是将“不变的事 物”与 “可能改变的事物”分离开来。在这个故事中，动物都会叫，这是不变的，但是不同类 型的动物具体怎么叫是可变的。把不变的部分隔离出来，把可变的部分封装起来，这给予了我们 扩展程序的能力，程序看起来是可生长的，也是符合开放—封闭原则的，相对于修改代码来说， 仅仅增加代码就能完成同样的功能，这显然优雅和安全得多。",-1);function k(v,j,x,L,b,g){const t=r("ArticleMetadata");return i(),n("div",null,[d,c(t),l,p,h,_,f,m,u])}const A=s(o,[["render",k]]);export{P as __pageData,A as default};
