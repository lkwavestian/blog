import{_ as s,c as a,o as i,am as e}from"./chunks/framework.pKienSF_.js";const m=JSON.parse(`{"title":"","description":"","frontmatter":{"head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"3LNfUkScYzEz6k4D\\",\\"ck\\":\\"3LNfUkScYzEz6k4D\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"analysis/framework/vue2.md","filePath":"analysis/framework/vue2.md","lastUpdated":1758512362000}`),l={name:"analysis/framework/vue2.md"},n=e(`<p>vue2.6.13</p><h2 id="第一节" tabindex="-1">第一节 <a class="header-anchor" href="#第一节" aria-label="Permalink to &quot;第一节&quot;">​</a></h2><p>为了在浏览器调试源码中，查看当前代码在源码中的位置，需要在<code>packages.json</code>中加上</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rollup -w -c scripts/config.js --sourcemap --environment TARGET:web-full-dev&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>之后再启动<code>npm run dev</code></p><p>注意点：</p><ol><li>当调试 vue 的源码就会发现，函数的解释其实在源码中就有了，只不过是英文， 比如<code>initInternalComponent</code>函数</li><li>变量名及函数名都是有意义的，要注意</li></ol><p>怎样写会进入什么函数</p><p>为什么 js 文件中可以出现类型判断：使用了 flow</p><p>调试麻烦</p><h3 id="第三节" tabindex="-1">第三节 <a class="header-anchor" href="#第三节" aria-label="Permalink to &quot;第三节&quot;">​</a></h3><h3 id="vue-2-6-13-源码-examples-目录分析" tabindex="-1">Vue 2.6.13 源码 examples 目录分析 <a class="header-anchor" href="#vue-2-6-13-源码-examples-目录分析" aria-label="Permalink to &quot;Vue 2.6.13 源码 examples 目录分析&quot;">​</a></h3><p>注意：2.6 2.5 源码其实相差不大，对比着看就行</p><p>这个 examples/ 目录包含了 Vue.js 的官方示例，展示了 Vue 的各种核心功能和最佳实践。每个示例都有特定的用途： 📁 主要示例分类</p><ol><li>基础功能示例 commits/ - GitHub API 数据获取 演示：v-for、v-model、watch、filters、异步数据加载 用途：学习数据绑定、条件渲染、过滤器使用 todomvc/ - 经典 TodoMVC 实现 演示：完整的 SPA 应用、路由、本地存储、组件通信 用途：学习 Vue 应用架构、状态管理、生命周期</li><li>组件化示例 tree/ - 递归树形组件 演示：递归组件、Vue.set、动态数据操作 用途：学习复杂组件设计、递归渲染 modal/ - 模态框组件 演示：插槽（slots）、过渡动画、组件通信 用途：学习可复用组件设计 grid/ - 数据表格组件 演示：组件 props、计算属性、排序过滤 用途：学习数据展示组件</li><li>特殊功能示例 svg/ - SVG 图形操作 演示：Vue 与 SVG 结合、动态图形生成 用途：学习数据可视化 markdown/ - Markdown 编辑器 演示：v-html、第三方库集成、防抖处理 用途：学习富文本处理 firebase/ - Firebase 集成 演示：实时数据库、表单验证、插件使用 用途：学习后端集成</li><li>动画和交互示例 elastic-header/ - 弹性头部动画 move-animations/ - 移动动画 select2/ - 下拉选择组件 🚀 如何使用这些示例</li><li>直接运行</li><li>学习路径建议 入门：commits/ → markdown/ → modal/ 进阶：todomvc/ → tree/ → grid/ 高级：firebase/ → svg/ → 动画示例</li><li>源码学习重点 组件注册：看 Vue.component() 的使用 生命周期：观察 created、mounted 等钩子 响应式数据：理解 data、computed、watch 模板语法：学习 v-for、v-if、v-model 等指令</li><li>调试技巧 使用 debugger 语句在关键位置打断点 在浏览器开发者工具中观察 Vue 实例 修改示例代码来理解不同功能 �� 学习建议 从简单开始：先看 commits 和 markdown 示例 动手实践：修改示例代码，观察变化 对比学习：比较不同示例的实现方式 深入源码：结合 Vue 源码理解示例中的 API 这些示例是学习 Vue.js 的绝佳资源，每个都展示了特定的 Vue 特性和最佳实践。</li></ol><p>关于源码的学习，边学习边调试肯定是不错的方法，但是自己写实例对于新人来说一个是不知道如何下手，一个是写的不完美，索性直接从官网 example 入手 可以更改相关文件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../../dist/vue.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>源码阅读建议：源码一般都得看好几遍，即使再有人带的情况下，我的建议是最起码看三遍</p><ol><li>第一遍先快速的浏览下，知道那个文件是干嘛的，哪个函数大概的作用</li><li>第二遍跟着教程调试，遇见不懂的地方记下来</li><li>第三遍写自己测试用例，并写下自己的理解</li><li>理解每个函数的参数都是什么，自己写一个小型的 vue</li></ol><p>可以根据报错信息从源码解读，看看错误出现在哪</p><p>画流程图，与函数栈对应起来</p><p>抓大放小，源码不用一行一行深究，只需要知道大概的逻辑就可以，这个深度具体的自己把握，深了太浪费时间，浅了又不深刻 我的参考建议是流程类必须深究，工具类函数可以只是了解下， 接下来在我一些具体文章中可以体会到</p><p>演示一个完整的流程</p><p>我的一个兴趣爱好是-如何触发代码里的各种 warn</p><p>为什么非生产环境要判断，生产环境不需要判断吗？</p><p>源码与现象：重大的问题相结合</p><p>树结构举例</p><p>为什么注释会分行</p><p>结构、行 =&gt; 块 =&gt; 功能</p>`,29),t=[n];function p(r,o,d,h,c,k){return i(),a("div",null,t)}const E=s(l,[["render",p]]);export{m as __pageData,E as default};
