import{_ as o,E as n,c as s,o as t,am as e,I as r}from"./chunks/framework.pKienSF_.js";const c="/assets/image.DkoSzMmL.png",d="/assets/image-1.CM2ovAM5.png",A=JSON.parse(`{"title":"通过实例深入了解防抖与节流","description":"","frontmatter":{"head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"3LNfUkScYzEz6k4D\\",\\"ck\\":\\"3LNfUkScYzEz6k4D\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"translate/debounceAndThrotting.md","filePath":"translate/debounceAndThrotting.md","lastUpdated":1758793222000}`),i={name:"translate/debounceAndThrotting.md"},l=e('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>原文地址：<a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="noreferrer">Debouncing and Throttling Explained Through Examples</a></p><p>原文作者：<a href="https://twitter.com/dcorbacho" target="_blank" rel="noreferrer">David Corbacho</a></p><p>译者：<a href="https://github.com/lkwavestian" target="_blank" rel="noreferrer">千浔</a></p></div><h1 id="通过实例深入了解防抖与节流" tabindex="-1">通过实例深入了解防抖与节流 <a class="header-anchor" href="#通过实例深入了解防抖与节流" aria-label="Permalink to &quot;通过实例深入了解防抖与节流&quot;">​</a></h1>',2),p=e('<p>防抖<code>（Debouncing）</code>与节流<code>（Throttling）</code>是两个相似但又截然不同的技术，他们都用于控制在一段时间内函数执行的次数。</p><p>防抖和节流特别适用于<code>DOM</code>事件，因为我们会在 <code>DOM</code> 事件与执行函数之间多加一层。需要注意一点：我们无法控制 <code>DOM</code> 事件的的触发频率，我们只能控制函数执行的频率。</p><p>看下面这个滚动事件的例子:</p><p>当我们使用触控板、滚轮或者拖动滚动条来滚动时，每秒可以轻松触发 <code>30</code> 次滚动事件。甚至在我的测试中，使用智能手机缓慢滚动时，每秒甚至可以触发多达 <code>100</code> 次滚动事件。这么高的回调频率，你的执行函数压力真的不大吗？</p><p><code>2011</code> 年， <code>Twitter</code> 网站曾出现一个<code>Bug</code>：当用户向下滑动他们的 <code>Twitter</code>摘要时，页面会卡顿甚至变得毫无反应。<code>John Resig</code> 发表了一篇<a href="https://johnresig.com/blog/learning-from-twitter/" target="_blank" rel="noreferrer">有关问题的博客文章</a>，其中解释了将内存消耗昂贵的函数直接绑定在滚动事件上的做法有多糟糕。</p><p><code>John</code> 在他的文章中提到了一个解决方案：将 <code>DOM</code> 事件与执行函数分开，在 <code>DOM</code> 事件之外，每 <code>250ms</code> 循环执行一次函数。通过这样一个简单的技术，我们可以避免破坏用户的使用体验。</p><p>但是现在，我们有更好的方法去处理这个问题。下面我会结合用例介绍防抖<code>（Debounce）</code>、节流<code>（Throttle）</code>与 <code>requestAnimationFrame</code>这三种技术。</p><h2 id="防抖-debounce" tabindex="-1">防抖（Debounce） <a class="header-anchor" href="#防抖-debounce" aria-label="Permalink to &quot;防抖（Debounce）&quot;">​</a></h2><p>防抖<code>（Debouncing）</code>是一种将多个连续的回调合并为一次回调的技术。</p><p><img src="'+c+'" alt="alt text" loading="lazy"></p><p>想象你在电梯里。电梯门刚开始关闭时，突然有一个人试图闯进来，由于电梯门还没有完全关闭，它就会重新打开。这时又有一个人试图进来，电梯门又重新打开了。电梯推迟了它的操作（指关闭电梯门并移动到指定楼层），但是最大化了它的承载能力。</p><p>可以在下面这个例子上试验一下：在 <code>Trigger area</code> 按钮内移动鼠标或者点击该按钮：</p><div class="tip custom-block"><p class="custom-block-title">译者注：</p><p>这里原作者做了一个可视化条形图巧妙的展示了防抖的功能。</p><p>每个色块表示一次回调函数的执行，色块宽度其实代表 100ms 的时间间隔。</p><p>后文的几个例子与此例原理相似，只不过触发事件不同。在这个例子中，事件触发可以在<code>Trigger area</code>按钮内移动或者点击。以看到：原始事件每次触发都会显示当前颜色，而防抖事件只有停止触发后 400ms 才显示。</p></div><p>你可以直观感受到一系列连续且快速的事件是如何被一个防抖事件所取代的。但是如果这些事件的间隔时间过长，防抖就不会生效。</p><h3 id="立即执行-lead-immediate" tabindex="-1">立即执行（lead/immediate） <a class="header-anchor" href="#立即执行-lead-immediate" aria-label="Permalink to &quot;立即执行（lead/immediate）&quot;">​</a></h3><p>在上面的例子中，你可能会发现一个令人苦恼的现象：防抖事件会等待触发函数执行，一系列事件停止后，防抖事件才会立即执行。为什么它不会立即执行？那样的话它就跟原本的非 <code>debounce</code> 处理无异了。 直到两次快速调用之间的停顿结束，事件才会再次触发。</p><p>以下是个带<code>leading</code>标记的例子：</p><p><img src="'+d+`" alt="alt text" loading="lazy"></p><p>在 <code>underscore.js</code> 中，选项叫 <code>immediate</code> ，而不是 <code>leading</code></p><p>你可以在下面这个例子上试验一下：</p><h3 id="防抖实现" tabindex="-1">防抖实现 <a class="header-anchor" href="#防抖实现" aria-label="Permalink to &quot;防抖实现&quot;">​</a></h3><p>我第一次看到用 <code>javascript</code> 实现防抖是在 <a href="http://unscriptable.com/2009/03/20/debouncing-javascript-methods/" target="_blank" rel="noreferrer">John Hann </a>的博客上(同时他也是防抖这一概念的提出者)。</p><p>不久之后后，<code>Ben Alman</code> 做了个 <a href="https://benalman.com/projects/jquery-throttle-debounce-plugin/" target="_blank" rel="noreferrer">jQuery 插件</a>（已经不再维护），一年后 <code>Jeremy Ashkenas</code> <a href="https://github.com/jashkenas/underscore/commit/9e3e067f5025dbe5e93ed784f93b233882ca0ffe" target="_blank" rel="noreferrer">把它加入了 underscore.js</a>。而后加入了 <code>Lodash</code> 。</p><p>这三种方法在内部实现上面稍有不同，但是他们的接口几乎一致。</p><p>在之前的一段时间内，<code>underscore.js</code> 实现 <code>debounce</code> 和 <code>throttle</code> 的方法还是源自于 <code>lodash</code>，但是在我发现 <code>lodash</code> 中<a href="http://drupalmotion.com/article/debounce-and-throttle-visual-explanation" target="_blank" rel="noreferrer">关于 debounce 实现的一个 bug 之</a>后，这两种方案的实现就分开了。</p><p><code>lodash</code> 为它的<code>_.debounce</code> 和 <code>_.throttle</code> 添加了更多功能。之前的 <code>immediate</code> 被 <code>leading</code> 和 <code>trailing</code> 选项取代。你可以选一种，或者都选，默认只有 <code>trailing</code> 启用。</p><p>新的 <code>maxWait</code> 选项（在此时只有 <code>moment</code> 有）在本文中没有被提及，但是这个选项非常有用。事实上，<code>throttle</code> 函数正式在 <code>debounce</code> 函数的基础上又利用 <code>maxWait</code> 来实现的，具体细节你可以<code>lodash</code> 源码。</p><h3 id="防抖应用实例" tabindex="-1">防抖应用实例 <a class="header-anchor" href="#防抖应用实例" aria-label="Permalink to &quot;防抖应用实例&quot;">​</a></h3><p><strong>调整窗口宽高例子</strong></p><p>当我们调整浏览器窗口大小时，会多次触发窗口 <code>resize</code> 事件。</p><p>看下面这个例子（尝试下调整你的浏览器窗口大小）：</p><p>就如你在代码中看到的，我们为这个 <code>resize</code> 事件设置了默认的 <code>trailing</code> 选项，因为我们只关心用户停止调整浏览器窗口时的最终值。</p><p><strong>通过 keypress 触发 Ajax 请求</strong></p><p>为什么当用户输入时，<code>Ajax</code> 请求会频繁地触发？<code>_.debounce</code> 函数会帮助我们减少重复请求，只在用户最终停止输入后才发送一次请求。</p><p>在这个例子中，我们不需要 <code>leading</code> 标记，我们想等待最后一个字符输入完。</p><p>类似的应用场景其实还有很多，比如表单的校验：当用户输入完成停止输入后，才去校验 <code>input</code>，展示密码太短的提示。</p><h2 id="如何去使用防抖和节流以及常见坑" tabindex="-1">如何去使用防抖和节流以及常见坑 <a class="header-anchor" href="#如何去使用防抖和节流以及常见坑" aria-label="Permalink to &quot;如何去使用防抖和节流以及常见坑&quot;">​</a></h2><p>自己去写一个防抖和节流函数或者随便从其他文章 <code>cv</code> 一下是个很省事的做法。但是我的建议是直接使用 <code>underscore.js</code> 或者 <code>lodash</code> ，如果你仅仅需要使用<code>.debounce</code> 和 <code>.throttle</code> 方法，可以使用 <code>Lodash</code> 的自定义构建工具，生成一个 <code>2KB</code> 的压缩库。使用以下的简单命令即可：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g lodash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lodash include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> debounce, throttle</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>一个常见的坑是不止一次调用<code>.debounce</code> 函数</p><div class="language-jquery vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jquery</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// WRONG</span></span>
<span class="line"><span>$(window).on(&#39;scroll&#39;, function() {</span></span>
<span class="line"><span>   _.debounce(doSomething, 300);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// RIGHT</span></span>
<span class="line"><span>$(window).on(&#39;scroll&#39;, _.debounce(doSomething, 200));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果你需要的话，可以将 <code>_.debounce</code> 函数的返回值保存在变量中，之后可以使用 <code>cancel</code> 方法 取消这个函数的调用。</p><div class="language-jquery vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jquery</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var debounced_version = _.debounce(doSomething, 200);</span></span>
<span class="line"><span>$(window).on(&#39;scroll&#39;, debounced_version);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// If you need it</span></span>
<span class="line"><span>debounced_version.cancel();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="节流-throttle" tabindex="-1">节流（Throttle） <a class="header-anchor" href="#节流-throttle" aria-label="Permalink to &quot;节流（Throttle）&quot;">​</a></h2><p>通过使用 <code>_.throttle</code> 函数，我们可以限制函数在指定的时间间隔内最多调用一次。</p><p>它与防抖的重要区别是，节流会保证调用函数至少在规定的时间间隔内会规律的调用。</p><h3 id="节流例子" tabindex="-1">节流例子 <a class="header-anchor" href="#节流例子" aria-label="Permalink to &quot;节流例子&quot;">​</a></h3><p><strong>无限滚动</strong></p><p>无限滚动一个常见的使用节流的例子。用户在你的无限滚动页面中向下滚动。你需要知道用户的滚动条距离最顶部还需要多远，如果用户滚动条已经接近低部，你需要加载更多数据。</p><p>在这个应用场景下，我们的<code>_debounce</code> 函数将不起作用，因为它只会在在用户停止滚动时触发一次...而我们需要的是在用户滚动条接近底部之前就请求内容（此时用户的滚动条可能还在滚动中）。</p><p>通过<code>_.throttle</code> 函数，我们可以确保在用户滚动过程中，我们可以持续的获得用户滚动条与底部的距离。</p><h2 id="requestanimationframe-raf" tabindex="-1">requestAnimationFrame (rAF) <a class="header-anchor" href="#requestanimationframe-raf" aria-label="Permalink to &quot;requestAnimationFrame (rAF)&quot;">​</a></h2><p>requestAnimationFrame 是限制函数执行频率的另一种方法</p><p>它的效果与 __.throttle(dosomething,16)一致。但它有着更高的准确度，因为它是浏览器专门用来提高准确度的一个原生 API。</p><p>我们可以把它当作 throttle 函数的一个替代品，他有着以下优缺点：</p><p><strong>优点：</strong></p><ul><li>动画将保持 60fps（每一帧 16 ms），但是浏览器内部会决定渲染的最佳时机</li><li>简洁标准的 API，后期维护成本低</li></ul><p><strong>缺点：</strong></p><ul><li>当使用<code>rAFs</code>时，开始和结束需要我们自己去定义，.debounce 和.throttle 内部的函数会自己处理</li><li>浏览器标签没有激活时，不会执行</li><li>兼容性问题：当前流行的大多数浏览器都支持，但是 <a href="https://caniuse.com/?search=requestAnimationFrame" target="_blank" rel="noreferrer">仍有部分浏览器不支持</a></li><li><code>rAF</code>不支持 node 端，无法在服务器端支持文件系统事件。</li></ul><p>根据我的经验，我会在 js 函数需要绘制或者改变元素属性时使用它，在任何包含重新计算元素位置的函数中都可以使用</p><p>在发送 ajax 请求，或者动态的添加/删除类名（这将会导致重新渲染）这两个场景时，我会考虑使用 debounce 或者 throttle 函数，因为他们可以设置更低的执行频率（比如使用 200ms 替换 16ms）。</p><p>假如你认为 rAF 会在 underscore 或者 lodash 中实现，恰恰想法，他们都没有实现，因为这个 API 是一个专门的用例（指在 16ms 内执行动画），并且它很容易被直接调用。</p><h2 id="raf-实例" tabindex="-1">rAF 实例 <a class="header-anchor" href="#raf-实例" aria-label="Permalink to &quot;rAF 实例&quot;">​</a></h2><p>我将仅用下面这一个例子来展示如何使用 rAF 处理滚动事件，灵感来自 Paul Lewis 的文章<a href="https://web.dev/articles/animations-guide?hl=zh-cn" target="_blank" rel="noreferrer">如何创建高性能 CSS 动画</a>，在这篇文章中，他一步步的解释了这个实例的原理。</p><p>我在 headroom.js 库中见过一个更高级的<a href="https://github.com/WickyNilliams/headroom.js/blob/3282c23bc69b14f21bfbaf66704fa37b58e3241d/src/Debouncer.js" target="_blank" rel="noreferrer">实例</a>，在这个实例中，逻辑被解耦并被包裹在对象中。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>我们可以使用 debounce、throttle 和 requestAnimationFrame 去优化我们的事件处理函数。三者各不相同，又相辅相成。</p><p>总结下目前我们所学到的知识：</p><ul><li>debounce（防抖）:把频繁触发的事件合并到一次执行。</li><li>throttle（节流）:保证事件在某一段时间内恒定的执行次数，比如每 200ms 检查一次滚动位置并触发 css 动画。</li><li>requestAnimationFrame：一个 throttle 的替代物。当你的函数在重新计算渲染屏幕上的元素时，并且你想要保证你的动画的流畅性时，你就可以用它。注意：IE9 不支持。</li></ul>`,69);function h(u,b,m,g,k,_){const a=n("ArticleMetadata");return t(),s("div",null,[l,r(a),p])}const v=o(i,[["render",h]]);export{A as __pageData,v as default};
